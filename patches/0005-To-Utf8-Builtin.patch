From d4b2303c7907d100a1fe885cc48cb90df344a622 Mon Sep 17 00:00:00 2001
From: Divy Srivastava <dj.srivastava23@gmail.com>
Date: Tue, 26 Sep 2023 18:40:55 +0530
Subject: [PATCH 5/5] Add `toUtf8` builtin

---
 src/builtins/builtins-definitions.h |  1 +
 src/builtins/builtins-string.cc     | 37 +++++++++++++++++++++++++++++
 src/init/bootstrapper.cc            |  2 ++
 3 files changed, 40 insertions(+)

diff --git a/src/builtins/builtins-definitions.h b/src/builtins/builtins-definitions.h
index 58c000c62e..a664490b26 100644
--- a/src/builtins/builtins-definitions.h
+++ b/src/builtins/builtins-definitions.h
@@ -951,6 +951,7 @@ namespace internal {
   /* String */                                                                 \
   /* ES #sec-string.fromcodepoint */                                           \
   CPP(StringFromCodePoint)                                                     \
+  CPP(StringToUtf8)                                                            \
   /* ES6 #sec-string.fromcharcode */                                           \
   TFJ(StringFromCharCode, kDontAdaptArgumentsSentinel)                         \
   /* ES6 #sec-string.prototype.lastindexof */                                  \
diff --git a/src/builtins/builtins-string.cc b/src/builtins/builtins-string.cc
index db193bdf8b..dd3ba322d1 100644
--- a/src/builtins/builtins-string.cc
+++ b/src/builtins/builtins-string.cc
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "src/api/api-inl.h"
 #include "src/builtins/builtins-utils-inl.h"
 #include "src/builtins/builtins.h"
 #include "src/heap/heap-inl.h"  // For ToBoolean. TODO(jkummerow): Drop.
@@ -131,6 +132,42 @@ BUILTIN(StringPrototypeLastIndexOf) {
                              args.atOrUndefined(isolate, 2));
 }
 
+void Deleter(void* data, size_t _len, void* _info) {
+  delete[] static_cast<uint8_t*>(data);
+}
+
+BUILTIN(StringToUtf8) {
+  HandleScope scope(isolate);
+
+  Handle<String> string;
+  ASSIGN_RETURN_FAILURE_ON_EXCEPTION(isolate, string,
+                                     Object::ToString(isolate, args.atOrUndefined(isolate, 1)));
+
+  string = String::Flatten(isolate, string);
+
+  size_t len;
+  uint8_t* buf_;
+  std::unique_ptr<uint8_t[]> allocated_;
+
+  Local<v8::String> local = v8::Utils::ToLocal(string);
+  auto* v8_isolate = reinterpret_cast<v8::Isolate*>(isolate);
+  len = local->Utf8Length(v8_isolate);
+
+  allocated_ = std::make_unique<uint8_t[]>(len);
+  buf_ = allocated_.release();
+
+  if (len > 0) {
+    local->WriteUtf8(v8_isolate, reinterpret_cast<char*>(buf_));
+  }
+
+  std::unique_ptr<BackingStore> memory = BackingStore::WrapAllocation(
+      buf_, len,
+      Deleter, nullptr, SharedFlag::kNotShared);
+  Handle<JSArrayBuffer> new_buffer = isolate->factory()->NewJSArrayBuffer(std::move(memory));
+
+  return *new_buffer;
+}
+
 // ES6 section 21.1.3.10 String.prototype.localeCompare ( that )
 //
 // This function is implementation specific.  For now, we do not
diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
index 005c57a863..69633a9966 100644
--- a/src/init/bootstrapper.cc
+++ b/src/init/bootstrapper.cc
@@ -3453,6 +3453,8 @@ void Genesis::InitializeGlobal(Handle<JSGlobalObject> global_object,
     // Deno-specific methods. See deno_core/01_core.js
     SimpleInstallFunction(isolate_, global, "fromUtf8",
                           Builtin::kTypedArrayUtf8String, 1, false);
+    SimpleInstallFunction(isolate_, global, "toUtf8",
+                          Builtin::kStringToUtf8, 1, false);
 
     SimpleInstallFunction(isolate_, prototype, "copyWithin",
                           Builtin::kTypedArrayPrototypeCopyWithin, 2, false);
-- 
2.37.1 (Apple Git-137.1)
